AISHWARYA VENKATARAMAN

I segregated the project into the following modules:
Token
Lexer
Parser
LispNode
EvalSimple
LispException
Interpreter

Interpreter is the driver module. It calls Lexer, parser and EvalSimple modules in a loop till EOF is reached. It calls the lexer and parser in the same loop so 
that Parser can feed on the tokens generated by the lexer. This loop runs till an expression is complete. This is marked by the fact that left and right parenthesis match. Parser keeps building parse tree with the tokens.
Once a complete expression is encountered, Interpreter calls the EvalSimple module to evalute the parse tree.
EvalSimple evaluates the parsetree and sends the result back to Interpreter in a Lisp tree which is converted to a Lisp List and printed to the STDOUT.

Helper modules include:
Token file handles the generation of tokens. It is called from the Lexer module. These 2 modules together, read the input and generate a stream of tokens
LispNode implements the LispNode datastructure. it implements a Binary tree while ensuring that the tree generated is in Lisp List format.
LispException is a userdefined Exception handling class. It extends Exceptions and it is used in all the modules to throw and catch errors accurately.

